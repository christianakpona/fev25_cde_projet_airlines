{
	"info": {
		"_postman_id": "61482758-6549-49e2-ba06-2dcd185ea59a",
		"name": "Airlines Project",
		"description": "# 📄 Get started here\n\nThis template contains a boilerplate for documentation that you can quickly customize and reuse.\n\n## 🔖 How to use this template\n\n- Replace the content given brackets (()) with your API's details.\n- Tips are formatted in `codespan` - feel free to read and remove them.\n    \n\n---\n\n`Start with a brief overview of what your API offers.`\n\nThe ((product name)) provides many API products, tools, and resources that enable you to ((add product value here)).\n\n`You can also list the APIs you offer, link to the relevant pages, or do both in this section.`\n\n## **Getting started guide**\n\n`List the steps or points required to start using your APIs. Make sure to cover everything required to reach success with your API as quickly as possible.`\n\nTo start using the ((add APIs here)), you need to -\n\n`The points given below are from The Postman API's documentation. You can reference it to write your own getting started guide.`\n\n- You must use a valid API Key to send requests to the API endpoints. You can get your API key from Postman's [integrations dashboard](https://go.postman.co/settings/me/api-keys).\n- The API has [rate and usage limits](https://learning.postman.com/docs/developer/postman-api/postman-api-rate-limits/).\n- The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.\n- The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key.\n    \n\n## Authentication\n\n`Add details on the authorization keys/tokens required, steps that cover how to get them, and the relevant error codes.`\n\nThe ((product name)) API uses ((add your API's authorization type)) for authentication.\n\n`The details given below are from the Postman API's documentation. You can reference it to write your own authentication section.`\n\nPostman uses API keys for authentication. You can generate a Postman API key in the [API keys](https://postman.postman.co/settings/me/api-keys) section of your Postman account settings.\n\nYou must include an API key in each request to the Postman API with the X-Api-Key request header.\n\n### Authentication error response\n\nIf an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.\n\n## Rate and usage limits\n\n`Use this section to cover your APIs' terms of use. Include API limits, constraints, and relevant error codes, so consumers understand the permitted API usage and practices.`\n\n`The example given below is from The Postman API's documentation. Use it as a reference to write your APIs' terms of use.`\n\nAPI access rate limits apply at a per-API key basis in unit time. The limit is 300 requests per minute. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code.\n\nEach API response returns the following set of headers to help you identify your use status:\n\n| Header | Description |\n| --- | --- |\n| `X-RateLimit-Limit` | The maximum number of requests that the consumer is permitted to make per minute. |\n| `X-RateLimit-Remaining` | The number of requests remaining in the current rate limit window. |\n| `X-RateLimit-Reset` | The time at which the current rate limit window resets in UTC epoch seconds. |\n\n### 503 response\n\nAn HTTP `503` response from our servers indicates there is an unexpected spike in API access traffic. The server is usually operational within the next five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, [contact support](https://support.postman.com/hc/en-us/requests/new/).\n\n### **Need some help?**\n\n`Add links that customers can refer to whenever they need help.`\n\nIn case you have questions, go through our tutorials ((link to your video or help documentation here)). Or visit our FAQ page ((link to the relevant page)).\n\nOr you can check out our community forum, there’s a good chance our community has an answer for you. Visit our developer forum ((link to developer forum)) to review topics, ask questions, and learn from others.\n\n`You can also document or add links to libraries, code examples, and other resources needed to make a request.`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "4921240",
		"_collection_link": "https://dark-moon-8542.postman.co/workspace/My-Workspace~06196486-8e67-4737-8cc9-6439e0ffb4eb/collection/4921240-61482758-6549-49e2-ba06-2dcd185ea59a?action=share&source=collection_link&creator=4921240"
	},
	"item": [
		{
			"name": "Lufthansa API",
			"item": [
				{
					"name": "Authentification",
					"item": [
						{
							"name": "Getting an Access Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/me",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"me"
									]
								},
								"description": "Gets information about the authenticated user."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/me",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": 12345678,\n        \"username\": \"taylor-lee\",\n        \"email\": \"taylor.lee@example.com\",\n        \"fullName\": \"Taylor Lee\",\n        \"avatar\": \"https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg\",\n        \"isPublic\": true\n    },\n    \"operations\": [\n        {\n            \"name\": \"mock_usage\",\n            \"limit\": 1000000,\n            \"usage\": 110276,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"monitor_request_runs\",\n            \"limit\": 10000000,\n            \"usage\": 1141750,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"api_usage\",\n            \"limit\": 1000000,\n            \"usage\": 16240,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"custom_domains\",\n            \"limit\": 25,\n            \"usage\": 25,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"serverless_requests\",\n            \"limit\": 10000,\n            \"usage\": 0,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"integrations\",\n            \"limit\": 5000,\n            \"usage\": 1018,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"cloud_agent_requests\",\n            \"limit\": 1000000,\n            \"usage\": 1615,\n            \"overage\": 0\n        }\n    ]\n}"
								},
								{
									"name": "Rate Limit Exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/me",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"me"
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
								}
							]
						}
					],
					"description": "The `/me` endpoints let you manage information about the authenticated user."
				},
				{
					"name": "Reference Data",
					"item": [
						{
							"name": "Countries",
							"item": [
								{
									"name": "List of countries",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								},
								{
									"name": "List of countries /{countryCode}[?lang={languageCode}]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											],
											"query": [
												{
													"key": "access_key",
													"value": "{{accessKey}}",
													"description": "Optional. A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.",
													"disabled": true
												}
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								},
								{
									"name": "List of countries [?limit={recordLimit}][&][offset={recordOffset}]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries/FR?lang=FR",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries",
												"FR"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Optional. A workspace ID.",
													"disabled": true
												},
												{
													"key": "lang",
													"value": "FR"
												}
											]
										},
										"description": "Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "workspace",
															"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
															"description": "Optional. A workspace ID.",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        },\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-01-13T10:21:46.000Z\",\n            \"updatedAt\": \"2022-02-12T11:29:56.000Z\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"isPublic\": false,\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        {\n            \"id\": \"f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"name\": \"Postman Echo\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2021-04-11T09:18:26.000Z\",\n            \"updatedAt\": \"2022-05-01T15:29:32.000Z\",\n            \"uid\": \"12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"isPublic\": true\n        }\n    ]\n}"
										},
										{
											"name": "Filter by Workspace",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "workspace",
															"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
															"description": "Optional. A workspace ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        }\n    ]\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "workspace",
															"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
															"description": "Optional. A workspace ID.",
															"disabled": true
														}
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								}
							],
							"description": "Retrieves the complete details of one particular country or list of countries and supports multiple languages whereever its applicable and available.\n\n### Request URIs\n\n#### Code snippet: Call\n\n```\nGET /mds-references/countries\nGET /mds-references/countries/{countryCode}[?lang={languageCode}]\nGET /mds-references/countries[?limit={recordLimit}][&][offset={recordOffset}]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{countryCode}_ | Optionally return only this country. | 2-letter ISO 3166-1 country code, e.g. “DE”. |\n| _{languageCode}_ | Optionally return the country name in only this language. If not present, all languages will be in the response. | 2-letter ISO 639-1 language code, e.g. “EN”. |\n| _{recordLimit}_ | Optionally sets the number of records returned. Defaults to 20, maximum is 100. | integer, e, g, 44 |\n| _{recordOffset}_ | Optionally sets the number of records skipped when sorting response records alphabetically. Defaults to 0. | integer, e.g. 123 |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /mds-references/countries\nGET /mds-references/countries/DE\nGET /mds-references/countries/DE?lang=EN\nGET /mds-references/countries?limit=44&offset=123\n\n ```\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| CountryResource | Root element of country response. |\n| .Countries | Container for country elements. |\n| ..Country\\[\\] | Array of all available countries or one country matching the request. |\n| ...CountryCode | 2-letter ISO 3166-1 country code, e.g. “DE”. |\n| ...Names | Container for country full names. |\n| ....Name\\[\\] | Array: language specific full name of country. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| .Meta | Container for meta links. |\n| ..Link\\[\\] |  |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						},
						{
							"name": "Cities",
							"item": [
								{
									"name": "List of cities",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								},
								{
									"name": "List of cities /{countryCode}[?lang={languageCode}]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											],
											"query": [
												{
													"key": "access_key",
													"value": "{{accessKey}}",
													"description": "Optional. A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.",
													"disabled": true
												}
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								},
								{
									"name": "List of cities [?limit={recordLimit}][&][offset={recordOffset}]",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries/FR?lang=FR",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries",
												"FR"
											],
											"query": [
												{
													"key": "workspace",
													"value": "{{workspaceId}}",
													"description": "Optional. A workspace ID.",
													"disabled": true
												},
												{
													"key": "lang",
													"value": "FR"
												}
											]
										},
										"description": "Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "workspace",
															"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
															"description": "Optional. A workspace ID.",
															"disabled": true
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        },\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-01-13T10:21:46.000Z\",\n            \"updatedAt\": \"2022-02-12T11:29:56.000Z\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"isPublic\": false,\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        {\n            \"id\": \"f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"name\": \"Postman Echo\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2021-04-11T09:18:26.000Z\",\n            \"updatedAt\": \"2022-05-01T15:29:32.000Z\",\n            \"uid\": \"12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"isPublic\": true\n        }\n    ]\n}"
										},
										{
											"name": "Filter by Workspace",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "workspace",
															"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
															"description": "Optional. A workspace ID."
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        }\n    ]\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections"
													],
													"query": [
														{
															"key": "workspace",
															"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
															"description": "Optional. A workspace ID.",
															"disabled": true
														}
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								}
							],
							"description": "Retrieves the complete details of one particular city or list of cities and supports multiple languages whereever its applicable and available.\n\nThe resource contains city name(s), country code(s) and local airport(s).\n\n### Request URIs\n\n#### Code snippet: Call\n\n```\nGET /mds-references/cities\nGET /mds-references/cities/{cityCode}[?lang={languageCode}]\nGET /mds-references/cities[?limit={recordLimit}][&][offset={recordOffset}]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{cityCode}_ | Optionally return only this city. | 3-letter IATA city code, e.g. “FRA” |\n| _{languageCode}_ | Optionally return the city name in only this language. If not present, all languages will be in the response. | 2-letter ISO 639-1 language code, e.g. “EN” |\n| _recordLimit_ | Optionally sets the number of records returned. Defaults to 20, maximum is 100. | integer, e.g 44 |\n| _recordOffset_ | Optionally sets the number of records skipped when sorting response records alphabetically. Defaults to 0. | integer, e.g 123 |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /mds-references/cities\nGET /mds-references/cities/NYC \nGET /mds-references/cities/NYC?lang=DE\nGET /mds-references/cities?limit=44&offset=123\n\n ```\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| CityResource | Root element of city response. |\n| .Cities | Container for city elements. |\n| ..City\\[\\] | Array of all available cities or one city matching the request. |\n| ...CityCode | 3-letter IATA city code, e.g. “FRA”. |\n| ...CountryCode | 2-letter ISO 3166-1 country code, e.g. “DE”. |\n| ...Names | Container for city full names. |\n| ....Name\\[\\] | Array: language-specific full name of city. |\n| ...UtcOffset | UTC Offset value. |\n| ...TimeZoneId | Time zone of city. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| ...Airports | Container for airport IATA codes. |\n| ....AirportCode\\[\\] | Array: 3-letter IATA airport codes of airports within the city,  <br>e.g. “LCY”, “LHR” and “STN” for city of London. |\n| .Meta | Container for meta links. |\n| ..Link\\[\\] |  |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						},
						{
							"name": "Airports",
							"item": [
								{
									"name": "List of airports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								}
							],
							"description": "Retrieves the complete details of one particular airport or list of airports and supports multiple languages whereever its applicable and available.\n\nThis resource contains the name, code and GPS location of each airport.\n\n### Request URIs\n\n#### Code snippet: Call\n\n```\nGET /mds-references/airports[?LHoperated=1]\nGET /mds-references/airports/{airportCode}[?lang={languageCode}]\nGET /mds-references/airports[?limit={recordLimit}][&][offset={recordOffset}]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{airportCode}_ | Optionally return only this airport. | 3-letter IATA airport code, e.g. “TXL”. |\n| _{languageCode}_ | Optionally return the airport name in only this language. | 2-letter ISO 639-1 language code, e.g. “EN”. |\n| _{recordLimit}_ | Optionally sets the number of records returned. Defaults to 20, maximum is 100. | integer, e, g, 44 |\n| _{recordOffset}_ | Optionally sets the number of records skipped when sorting response records alphabetically. Defaults to 0. | integer, e.g. 123 |\n| LHoperated | Optionally If set to 1, only locations with flights operated by Lufthansa will be returned. | boolean e.g. 0 |\n| group | Optionally restrict the results to locations with flights operated by group. | enum: {MilesAndMore,LHOperated,AllAirports} |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /mds-references/airports\nGET /mds-references/airports?LHoperated=1\nGET /mds-references/airports/TXL\nGET /mds-references/airports/TXL?lang=DE\nGET /mds-references/airports?limit=44&offset=123\n\n ```\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| AirportResource | Root element of airport response. |\n| .Airports | Container for airport elements. |\n| ..Airport\\[\\] | Array of all available airports or one airport matching the request. |\n| ...AirportCode | 3-letter IATA airport code, e.g. “TXL”. |\n| ...Position | Physical location of an airport. This data section is optional and therefore not always present. |\n| ....Coordinate | Container for coordinates. |\n| .....Latitude | Decimal latitude. Range: -90 (South Pole) to +90 (North Pole),  <br>e.g. “51.540”. |\n| .....Longitude | Decimal longitude. Range: -180 (West of Prime Meridian) to +180 (East of Prime Meridian). |\n| ...CityCode | 3-letter IATA city code, e.g. “BER”. |\n| ...CountryCode | 2-letter ISO 3166-1 country code, e.g. “DE”. |\n| ...LocationType | “Airport”, “RailwayStation” or \"BusStation\". |\n| ...Names | Container for airport names. |\n| ....Name\\[\\] | Array: language specific full name of airport. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| ...UtcOffset | Hour offset of airport to UTC time zone |\n| ...TimeZoneId | Time zone name airport is in |\n| .Meta | Container for meta links. |\n| ..Link\\[\\] | Array: links to resource itself and other related resources. |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						},
						{
							"name": "Nearest Airports",
							"item": [
								{
									"name": "List of nearest airports",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								}
							],
							"description": "Find the 5 closest airports to the given latitude and longitude, irrespective of the radius of the reference point. Hence, a radius is not needed for this service. This method could be useful for applications on mobile devices. Some locations are equidistant from several major airports. You can use the distance in the response to decide whether to present the user with more than one option or automatically choose the nearest. Not all languages are available for all airports but these codes are always supported; de, en, fr, es, it.\n\n### Request URIs\n\n#### Code snippet: Call\n\n```\nGET /references/airports/nearest/{latitude},{longitude}\nGET /references/airports/nearest/{latitude},{longitude}[?lang={languageCode}]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{latitude}_ | Decimal latitude. Only the first 3 decimal places are considered.  <br>Range: -90 (South Pole) to +90 (North Pole). | decimal. e.g. 51.540. |\n| _{longitude}_ | Decimal longitude. Only the first 3 decimal places are considered.  <br>Range: -180 (West of Prime Meridian) to +180 (East of Prime Meridian). | decimal. e.g. 5.935. |\n| _{languageCode}_ | Optionally return the airport names in only this language. If not specified, all languages will be in the response. | 2-letter ISO 639-1 language code, e.g. “DE”. |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /references/airports/nearest/36.562,-115.596\nGET /references/airports/nearest/51.540,5.953?lang=DE\n\n ```\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| AirportResource | Root element of airport response. |\n| .Airports | Container for airport elements. |\n| ..Airport\\[\\] | Array of all available airports or one airport matching the request. |\n| ...AirportCode | 3-letter IATA airport code, e.g. “TXL”. |\n| ...CityCode | 3-letter IATA city code, e.g. “BER”. |\n| ...CountryCode | 2-letter ISO 3166-1 country code, e.g. “DE”. |\n| ...Position | Physical location of the airport. |\n| ....Coordinate | Container for coordinates. |\n| .....Latitude | Decimal latitude. Range: -90 (South Pole) to +90 (North Pole), e.g. “51.540”. |\n| .....Longitude | Decimal longitude. Range: -180 (West of Prime Meridian) to +180 (East of Prime Meridian). |\n| ...LocationType | “Airport”, “RailwayStation” or \"BusStation\". |\n| ...Names | Container for airport names. |\n| ....Name\\[\\] | Array: language specific full name of airport. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| ...Distance | How close is this airport to the reference point. |\n| ....Value | The distance from the reference point. |\n| ....UOM | The units of measurement for the distance (always kilometers). |\n| .Meta | Container for meta links. |\n| ..Link\\[\\] | Array: links to resource itself and other related resources. |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						},
						{
							"name": "Airlines",
							"item": [
								{
									"name": "List of airlines",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								}
							],
							"description": "Retrieves the complete details of one particular airline or list of airlines.\n\n### Request URIs\n\n#### Code snippet: Call\n\n```\nGET /mds-references/airlines\nGET /mds-references/airlines/{airlineCode}\nGET /mds-references/airlines[?limit={recordLimit}][&][offset={recordOffset}]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{airlineCode}_ | Optionally return only this airline. | 2-character IATA airline designator code, e.g. “LH”. |\n| _{recordLimit}_ | Optionally sets the number of records returned. Defaults to 20, maximum is 100. | integer, e, g, 44 |\n| _{recordOffset}_ | Optionally sets the number of records skipped when sorting response records alphabetically. Defaults to 0. | integer, e.g. 123 |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /mds-references/airlines\nGET /mds-references/airlines/UA\nGET /mds-references/airlines?limit=44&offset=123\n\n ```\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| AirlineResource | Root element of airlines response. |\n| .Airlines | Container for airline elements. |\n| ..Airline\\[\\] | Array of all available airlines or one airline matching the request. |\n| ...AirlineID | 2-character IATA airline code, e.g. “LH”. |\n| ...AirlineID_ICAO | 3-letter ICAO airline code, e.g. \"DLH\". |\n| ...Names | Container for airline full names. |\n| ....Name\\[\\] | Array: language specific airline name, e.g. “Lufthansa”. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| .Meta | Container for meta links. |\n| ..Link\\[\\] |  |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						},
						{
							"name": "Aircraft",
							"item": [
								{
									"name": "List of aircraft",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{access_token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{base_url}}/{{version}}/mds-references/countries",
											"host": [
												"{{base_url}}"
											],
											"path": [
												"{{version}}",
												"mds-references",
												"countries"
											]
										},
										"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
									},
									"response": [
										{
											"name": "Successful Response",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"name": "Content-Type",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Get Collection with Access Token",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													],
													"query": [
														{
															"key": "access_key",
															"value": "{{accessKey}}"
														}
													]
												}
											},
											"status": "OK",
											"code": 200,
											"_postman_previewlanguage": "json",
											"header": [
												{
													"key": "Content-Type",
													"value": "application/json",
													"description": {
														"content": "",
														"type": "text/plain"
													}
												}
											],
											"cookie": [],
											"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
										},
										{
											"name": "Not Found",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Not Found",
											"code": 404,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
										},
										{
											"name": "Rate Limit Exceeded",
											"originalRequest": {
												"method": "GET",
												"header": [],
												"url": {
													"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
													"protocol": "https",
													"host": [
														"api",
														"getpostman",
														"com"
													],
													"path": [
														"collections",
														"12ece9e1-2abf-4edc-8e34-de66e74114d2"
													]
												}
											},
											"status": "Too Many Requests",
											"code": 429,
											"_postman_previewlanguage": "json",
											"header": [],
											"cookie": [],
											"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
										}
									]
								}
							],
							"description": "Retrieves the complete details of one particular aircraft or list of aircrafts.\n\n### Request URIs\n\n#### Code snippet: Call\n\n```\nGET /mds-references/aircraft\nGET /mds-references/aircraft/{aircraftCode}\nGET /mds-references/aircraft[?limit={recordLimit}][&][offset={recordOffset}]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{aircraftCode}_ | Optionally only return details for this aircraft type. | 3-character IATA equipment code, e.g. “380”. |\n| _{recordLimit}_ | Optionally sets the number of records returned. Defaults to 20, maximum is 100. | integer, e, g, 44 |\n| _{recordOffset}_ | Optionally sets the number of records skipped when sorting response records alphabetically. Defaults to 0. | integer, e.g. 123 |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /mds-references/aircraft\nGET /mds-references/aircraft/70M\nGET /mds-references/aircraft?limit=44&offset=123\n\n ```\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| AircraftResource | Root element of aircraft response. |\n| .AircraftSummaries | Container for aircraft elements. |\n| ..AircraftSummary\\[\\] | Array of all available aircraft or one aircraft matching the request. |\n| ...AircraftCode | 3-character IATA equipment code, e.g. “70M”. |\n| ...Names | Container for aircraft full names. |\n| ....Name\\[\\] | Array: language specific full name of aircraft. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| ...AirlineEquipCode | Airline-specific aircraft equipment code. |\n| .Meta | Container for meta links. |\n| ..Link\\[\\] |  |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						}
					],
					"description": "The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/)."
				},
				{
					"name": "Offers",
					"item": [
						{
							"name": "Seat Maps",
							"item": [
								{
									"name": "Seat Maps",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "The _seatmaps_ resource describes the layout of an aircraft’s cabin. It provides characteristics of each seat and gives the location of other cabin items such as lavatories, gallies, stairs and exits.\n\nYou must specify the cabin class in the request. If more than one cabin class is required, multiple requests must be issued. Not all cabin classes are available on all flights; generally there will be \"C\" (Business) and \"M\" (Economy). Some flights also have \"F\" (First) and \"E\" (Premium Economy). The response contains an element  `which describes exactly which seat map has been returned. In addition, seat row numbers will not necessarily be returned consequtively (e.g. sometimes, rows 13 and/or 17 are missing, ...).`\n\n`There is no method in the current version of the API to find which cabin classes are available on a given flight.`\n\n### `Request URI`\n\n#### `Code snippet: Call`\n\n```\nGET /offers/seatmaps/{flightNumber}/{origin}/{destination}/{departureDate}/{cabinTypeCode}\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{flightNumber}_ | The flight number, including carrier code and any suffix. | e.g. LH200, BA400X. |\n| _{origin}_ | The departure airport. | 3-letter IATA code, e.g. “FRA”. |\n| _{destination}_ | The arrival airport. | 3-letter IATA code, e.g. \"JFK\". |\n| _{departureDate}_ | The departure date in the local time of the departure airport. | yyyy-MM-dd. |\n| _{cabinClass}_ | Return the seat map for this cabin class. Not every cabin class is available on every flight. The most common values are: 'F' (First), 'C' (Business), 'E' (Premium Economy) and 'M' (Economy). | Single-character IATA PADIS 9800 reservation booking designator. |\n\n### `Request Examples`\n\n#### `Code snippet: Call`\n\n```\nGET /offers/seatmaps/LH400/FRA/JFK/2019-07-15/C\nGET /offers/seatmaps/LH400/FRA/JFK/2019-07-15/F\n\n ```\n\n### `Response Structure Definition`\n\n| Key | Description |\n| --- | --- |\n| SeatAvailabilityResource | Root element of the seat map response. |\n| .Flights | Flights container. There will only be one flight in a seat map response. |\n| ..Flight\\[\\] | Details of the flight. |\n| ...Departure | Details of the origin. |\n| ....AirportCode | 3-letter IATA code of the origin airport. |\n| ....ScheduledTimeLocal | Scheduled local time of departure from origin. |\n| .....DateTime | Scheduled time of departure:  <br>Format: yyyy-MM-ddTHH:mm.  <br>Sample: 2014-11-15T10:50.  <br><br>| Key | Description |<br>| --- | --- |<br>| 2014 | year |<br>| 11 | month of the year, always two digit |<br>| 15 | day of month, always 2 digits |<br>| T | indicating time follows after |<br>| 10 | hour in 24 hrs format |<br>| 50 | minutes of the hour | |\n| ...Arrival | Details of the destination. |\n| ....AirportCode | 3-letter IATA code of the destination airport. |\n| ...MarketingCarrier | Marketing-specific flight details, may differ from operating carrier details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Flight number. |\n| ...Equipment | Type of aircraft operating this flight. |\n| ....AircraftCode | 3-character IATA aircraft code. |\n| .CabinLayout | Describes key elements of the cabin layout such as the position of the wing or the location of exits. |\n| ..WingPosition | Which rows are above the aircraft’s wings. |\n| ...Rows | Grouping first and last row of where the wing is positioned. |\n| ....First | Number of first row over wing. |\n| ....Last | Number of last row over wing. |\n| ...ExitRowPosition\\[\\] | Which are the exit rows. |\n| ...Rows | Grouping first and last row of where an exit is positioned. |\n| ....First | Number of first row where this exit is positioned. |\n| ....Last | Number of last row where this exit is positioned. |\n| .SeatDisplay\\[\\] | Specifying the grid of the cabin type: number of columns and number of rows. |\n| ..Columns\\[\\] | One item per column. |\n| @Positions | Assigning the ‘name’ of the column such as column ‘A’, column ‘C’, etc. |\n| ...Rows | Grouping all rows of this cabin layout i.e. all rows of cabin class ‘First’ or ‘Business’ etc. |\n| ....First | Number of first row of this cabin. |\n| ....Last | Number of last row of this cabin. |\n| ...Component | Defining non-seat components of a cabin in relation to one specific row.  <br>NOTE: if a component definition shows up more than once with the same row number it is to be read as follows:  <br>First component with relation R (rear) to row 44 is located behind row 44.  <br>Second component with relation R (rear) to row 44 is located behind the first component that is located behind row 44..... and so on. |\n| ....Locations | Grouping the locations. |\n| .....Location\\[\\] | Exact location of a component. Example: Galley at row ‘86’ at center section. |\n| ......Row | Defines the one row which this component’s location is related to. Example: the component maybe in front of this row. |\n| .......Position | Actual row number which this component’s location is related to and which the orientation is referring to. |\n| .......Orientation | Defining the relation to the row number. |\n| ........Code | One letter code qualifying the row location, for list of all codes refer to following list: IATA PADIS 9976.  <br>Example: ‘F’ for front. This means the component that is specified here is found in front of row given in row.position. ‘R’ would say the component is located rear i.e. behind the row specified in row .position. |\n| ......Column | Defining the column where the component is located. |\n| .......Position | Giving the position of the column.  <br>NOTE: the position code is NOT the name of the column as specified in SeatDisplay.Columns@Position! It is a more generic name. |\n| ........Code | One or two letter code specifying the location where on this row this component is located, for list of all codes refer to following list: IATA PADIS 3227.  <br>NOTE: only the following codes will be seen here:  <br>‘C’ for Center Section  <br>‘L’ for Left side section  <br>‘LC’ for Left center section  <br>‘R’ for Right side section  <br>‘RC’ for Right center section |\n| ......Type | Specifying the type of component at this location. |\n| .......Code | One, two or three letter code specifying the cabin facilities characteristics i.e. component type, for list of all codes refer to following list: IATA PADIS 9978.  <br>Example: ‘G’ for Galley, ‘LA’ for Lavatory. |\n| ...CabinType | Specifying the type of cabin. |\n| ....Code | One letter code specifying the cabin type, for list of all codes refer to following list: IATA PADIS 9800. Example: ‘F’ for first class, ‘C’ for Business class. |\n| .SeatDetails\\[\\] | Holds all characteristics of one seat at a defined location.  <br>Example: Seat at column ‘A’; row ‘22’. |\n| ..Location | Element specifying the seat location: what column, what row. |\n| ...Column | Name of the column. Is a value of SeatDisplay.Columns found in this response. |\n| ...Row | Describing the seat details. |\n| ....Number | Number of the row, together with the column value this defines one and only one seat. |\n| ....Characteristics | List of all characteristics of a seat. |\n| .....Characteristic\\[\\] | Such a characteristic comprises of column characteristics and seat characteristics. |\n| ......Code | One or two letter code specifying the column characteristic, for list of all codes refer to following list: IATA PADIS 9882. Example: ‘9’ for ‘Center seat (not window, not aisle)’  <br>OR  <br>One or two letter code specifying the seat characteristic, for list of all codes refer to following list: IATA PADIS 9825. Example: ‘W’ for ‘Window seat’; ‘UP’ for ‘Upper Deck’. |\n| ....Type | Specifies the type of a complete row hence the elements column, availability, characteristics are obsolete. |\n| .....Code | One letter code specifying the row characteristics, for list of all codes refer to following list: IATA PADIS 9864. Example: ‘Z’ for ‘row does not exist’. |\n| .Meta | Element containing meta data. |\n| ..Link\\[\\] | Element specifying links. |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |\n\n### `Characteristic codes`\n\n| Carrier | Code | Text | Characteristic Type |\n| --- | --- | --- | --- |\n| LH | 1 | Restricted seat - General | Seat characteristic |\n| LH | 1A | Seat not allowed for infant | Seat characteristic |\n| LH | 1D | Restricted recline seat | Seat characteristic |\n| LH | 1W | Window seat without window | Seat characteristic |\n| LH | 8 | No seat at this location | Seat characteristic |\n| LH | 9 | Center seat (not window, not aisle) | Seat characteristic |\n| LH | A | Aisle seat | Seat characteristic |\n| LH | B | Seat with bassinet facility | Seat characteristic |\n| LH | BC | Business Class Bed Seat | Seat characteristic |\n| LH | E | Exit row seat | Seat characteristic |\n| LH | EP | Economy Plus Seat | Seat characteristic |\n| LH | ES | Economy Seat | Seat characteristic |\n| LH | H | Seat with facilities for handicapped/incapacitated passenger | Seat characteristic |\n| LH | I | Seat suitable for adult with an infant | Seat characteristic |\n| LH | IE | Seat not suitable for child | Seat characteristic |\n| LH | JP | Jump Seat | Seat characteristic |\n| LH | K | Bulkhead seat | Seat characteristic |\n| LH | L | Leg space seat | Seat characteristic |\n| LH | LS | Left side of aircraft | Seat characteristic |\n| LH | O | Preferential seat | Seat characteristic |\n| LH | OW | Overwing seat(s) | Seat characteristic |\n| LH | Q | Seat in a quiet zone | Seat characteristic |\n| LH | RS | Right side of aircraft | Seat characteristic |\n| LH | UP | Upper deck | Seat characteristic |\n| LH | W | Window seat | Seat characteristic |\n| LH | WA | Window and Aisle together | Seat characteristic |\n| LH | Z | Buffer zone seat | Seat characteristic |\n|  |  |  |  |\n| LH | F | Front, precedes first row number within cabin class/compartment. | Component row location |\n| LH | M | Middle, between row numbers within a cabin class/compartment | Component row location |\n| LH | R | Rear, follows last row number within cabin class/compartment | Component row location |\n|  |  |  |  |\n| LH | C | Center Section | Component column location |\n| LH | L | Left side section | Component column location |\n| LH | LC | Left center section | Component column location |\n| LH | R | Right side section | Component column location |\n| LH | RC | Right center section | Component column location |\n|  |  |  |  |\n| LH | AR | Airphone | Component characteristic |\n| LH | BA | Bar | Component characteristic |\n| LH | BK | Bulkhead | Component characteristic |\n| LH | CL | Closet | Component characteristic |\n| LH | D | Exit Door | Component characteristic |\n| LH | E | Emergency Exit | Component characteristic |\n| LH | G | Galley | Component characteristic |\n| LH | LA | Lavatory | Component characteristic |\n| LH | LG | Luggage Storage | Component characteristic |\n| LH | MV | Movie Screen | Component characteristic |\n| LH | SO | Storage Space | Component characteristic |\n| LH | ST | Stairs to upper deck | Component characteristic |\n| LH | TA | Table | Component characteristic |\n\n| Characteristic Type | Maps to ... |\n| --- | --- |\n| Seat characteristic |  |\n| Component row location | `relative to` |\n| Component column location |  |\n| Component characteristic |  |"
						},
						{
							"name": "Lounges",
							"item": [
								{
									"name": "Lounges",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "The _lounges_ resource returns information either for all available lounges or a specific lounge at a given airport or city, depending on the provided input parameters.\n\nYou must specify the airport or city _code_ in the request. The list of returned lounges may be limited by optional parameters either _cabinClass_ or _tierCode_, however you cannot specify both at the same time. The following table provides a list of possible values. When the _cabinClass_ and _tierCode_ are omitted, the full list of lounges for a specific airport or city will be returned. There is also an option to limit the response to a given language by specifying the optional _lang_ parameter. Not all languages are available for all lounges but these codes are always supported; en.\n\n_This API might not always reflect the latest status of the Lounge offering and data is provided without warranty._ \n\n### Request URI\n\n#### Code snippet: Call\n\n```\nGET /offers/lounges/{code}[?][cabinClass={cabinClassCode}|tierCode={tierCode}][&][lang={languageCode}]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{code}_ | The IATA airport code or city code. | 3-letter IATA code, e.g. \"ZRH\", \"JFK\" |\n| cabinClass | The cabin class code. The most common values are: 'F' (First), 'C' (Business), 'E' (Premium Economy) and 'M' (Economy). | 1-letter IATA code, e.g. \"F\", \"C\", \"E\", \"M\". |\n| tierCode | The frequent traveller tier level access code. The common values are: 'HON' (Honour), 'SEN' (Senator), 'FTL' (Frequent Traveller) and 'SGC' (Star Alliance Gold Card). | 3-letter lounge access code, e.g. \"HON\", \"SEN\", \"FTL\", \"SGC\" |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /offers/lounges/FRA?cabinClass=E\nGET /offers/lounges/FRA?tierCode=SEN&lang=de\n\n ```\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| LoungeResource | Root element of the lounges response. |\n| .Lounges | Container for lounge elements. |\n| ..Lounge\\[\\] | Array: Details of the lounge. |\n| ...Names | Container for lounge names. |\n| ....Name\\[\\] | Array: language-specific name of the lounge. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| ...AirportCode | 3-letter IATA code of the airport. |\n| ...CityCode | 3-letter IATA code of the city. |\n| ...Locations | Container for the lounge locations. |\n| ....Location\\[\\] | Array: language-specific description of the location of the lounge. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| ...OpeningHours | Opening hours described in language-specific terms. |\n| @LanguageCode | 2-letter ISO 639-1 language code for the corresponding item. |\n| ...Features | Container for boolean elements that specify availability of various lounge facilities. |\n| ....NonSmokingLounge | Boolean value to indicate whether the lounge is non-smoking. |\n| ....Restrooms | Boolean value to indicate whether restrooms are available in the lounge. |\n| ....ShowerFacilities | Boolean value to indicate whether shower facilities are available in the lounge. |\n| ....RelaxingRooms | Boolean value to indicate whether the lounge has relaxing rooms. |\n| ....MeetingRooms | Boolean value to indicate whether the lounge has meeting rooms. |\n| ....OfficeUnits | Boolean value to indicate whether the lounge has office units. |\n| ....CopyMachine | Boolean value to indicate whether the lounge has a copy machine. |\n| ....FaxMachine | Boolean value to indicate whether a fax-machine is available in the lounge. |\n| ....MAMPrinter | Boolean value to indicate whether the lounge has a 'Miles & More' printer in the lounge. |\n| ....CreditCardTelephone | Boolean value to indicate whether a credit card telephone is available in the lounge. |\n| ....FreeLocalTelephoneCalls | Boolean value to indicate whether free local telephone calls are available in the lounge. |\n| ....PCWithInternetAccess | Boolean value to indicate whether a PC's with internet access are available in the lounge. |\n| ....DataPortForLaptops | Boolean value to indicate whether a dataports for laptops are available in the lounge. |\n| ....WLANFacility | Boolean value to indicate whether WLAN is available in the lounge. |\n| ....TV | Boolean value to indicate whether a TV is available in the lounge. |\n| ...MagazineAndNews | Container for boolean elements that specify availability of magazines and newspaper in various languages. |\n| ....German | Boolean value to indicate whether German magazines are available in the lounge. |\n| ....International | Boolean value to indicate whether international magazines are available in the lounge. |\n| ....Local | Boolean value to indicate whether local magazines are available in the lounge. |\n| .Meta | Container for meta links. |\n| ..Link\\[\\] | Element specifying links. |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						}
					]
				},
				{
					"name": "Operations",
					"item": [
						{
							"name": "Flight Schedules",
							"item": [
								{
									"name": "Fligth Schedules",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "Retrieve a list of all possible flights (both direct and connecting) between two airports on a given date. Schedules are available for today and up to 360 days in the future.\n\n### Request URI\n\n#### Code snippet: Call\n\n```\nGET /operations/schedules/{origin}/{destination}/{fromDateTime}[?directFlights=true]\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{origin}_ | Departure airport. | 3-letter IATA airport code, e.g. “FRA”. |\n| _{destination}_ | Arrival airport. | 3-letter IATA airport code |\n| _{fromDateTime}_ | Departure date in the local time of the departure airport.  <br>Time is optional; the results will then include flights departing at most 1  <br>hour before this time. | yyyy-MM-dd\\[THH:mm\\]. |\n| directFlights | Optional to select only direct flights and exclude connections. | Boolean (true/false). |\n\n### Request Examples\n\n#### Code snippet: Call\n\n```\nGET /operations/schedules/FRA/JFK/2019-07-15\nGET /operations/schedules/FRA/JFK/2019-07-15T14:30\nGET /operations/schedules/FRA/JFK/2019-07-15?directFlights=true\n\n ```\n\n### Response Structure\n\n| Key | Description |\n| --- | --- |\n| ScheduleResource | Root element of the schedule response. |\n| .Schedule\\[\\] | Element listing one or more flights which complete the journey from origin to destination. |\n| ..TotalJourney | Time of the total journey from origin to destination. |\n| ...Duration | Actual duration:  <br>Format: P\\[n\\]nDT\\[n\\]nH\\[n\\]nM.  <br><br>Sample with hours and minutes only: PT19H45M.<br><br>| Key | Description |<br>| --- | --- |<br>| P | identifier, saying it is duration information |<br>| T | indicating time follows after |<br>| 19 | number of hours, without leading zero if one digit only |<br>| H | indicating hours |<br>| 45 | number of minutes, without leading zero if one digit only |<br>| M | indicating minutes |<br><br>Sample with days, hours and minutes: P1DT19H45M.<br><br>| Key | Description |<br>| --- | --- |<br>| P | identifier, saying it is a duration information |<br>| 1 | number of days |<br>| D | indicating days |<br>| T | indicating time follows after |<br>| 19 | number of hours, without leading zero if one digit only |<br>| H | indicating hours |<br>| 45 | number of minutes, without leading zero if one digit only |<br>| M | indicating minutes | |\n| ..Flight\\[\\] or ..Flight | Defining a flight from A to B which may only be one leg of a multi-leg flight. ( in case of single flight in response, \"Flight\" is object , not array ) |\n| ...Departure | Describing details of the origin airport. |\n| ....AirportCode | 3-letter IATA airport code of the place of origin. |\n| ....ScheduledTimeLocal | Scheduled local time of departure from origin. |\n| .....DateTime | Scheduled time of departure:  <br>Format: yyyy-MM-ddTHH:mm.  <br><br>Sample: 2014-12-03T13:50.<br><br>| Key | Description |<br>| --- | --- |<br>| 2014 | year |<br>| 12 | month of the year, always two digits |<br>| 03 | day of month, always 2 digits |<br>| T | indicating time follows after |<br>| 13 | hour in 24 hrs format |<br>| 50 | minutes of the hour | |\n| ....Terminal | Terminal of where flight is departing from. |\n| .....Name | Name of terminal where flight is departing from. |\n| ...Arrival | Describing details of the destination of the flight. |\n| ....AirportCode | 3-letter IATA airport code of the place of destination. |\n| ....ScheduledTimeLocal | Scheduled local time of arrival at destination. |\n| .....DateTime | Scheduled time of arrival format: yyyy-MM-ddTHH:mm. |\n| ....Terminal | Terminal of where fight is arriving at. |\n| .....Name | Name of terminal where flight is arriving at. |\n| ...MarketingCarrier | Marketing specific flight details, does not have to be identical with operation specific details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Flight number of the marketing carrier. |\n| ...OperatingCarrier | Operating specific flight details, does not have to be identical with marketing specific details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Flight number of the operating carrier. |\n| ...Equipment | Type of aircraft operating this flight. |\n| ....AircraftCode | 3-character IATA aircraft code. |\n| ....OnBoardEquipment | Holds on--board entertainment information for this flight |\n| .....InflightEntertainment | Indicates whether an in-flight entertainment system is available on this flight |\n| .....Compartment | Indicates the cabin class, description, In-flight Amenities ( Flynet, USB, Seat Power,LiveTv) |\n| ......ClassCode | cabin class or compartment class code (F - FirstClass ,C- Business Class,E - PremiumEconomy ,Y - Economy) |\n| ......ClassDesc | cabin class descrption (F - FirstClass ,C- Business Class,E - PremiumEconomy ,Y - Economy) |\n| ......FlyNet | Indicates whether Lufthansa FlyNet is available on this flight |\n| ......SeatPower | Indicates whether Lufthansa SeatPower is available on this flight |\n| ......Usb | Indicates whether Lufthansa USB is available on this flight |\n| ......LiveTv | Indicates whether Lufthansa Live TV is available on this flight |\n| ...Details | Details of this flight’s schedule. |\n| ....Stops | Stops that this flight does between place of departure and place of arrival. |\n| .....StopQuantity | Actual number of stops. |\n| ....DaysOfOperation | List of week days when this flight is operated:<br><br>| Day number | Day name |<br>| --- | --- |<br>| 1 | Monday |<br>| 2 | Tuesday |<br>| 3 | Wednesday |<br>| 4 | Thursday |<br>| 5 | Friday |<br>| 6 | Saturday |<br>| 7 | Sunday | |\n| ....DatePeriod | Time period of when this flight is operating. |\n| .....Effective | Date when this flight starts operating Format: yyyy-MM-dd. |\n| .....Expiration | Date when this flight stops operating Format: yyyy-MM-dd. |\n| .Meta | Element containing meta data. |\n| ..Link\\[\\] | Element specifying links. |\n| @Href | Link to actual a resource. |\n| @Rel | Specifying kind of link such as ‘self’ (link that returned this response), ‘alternate’ (link that points to another resource) or ‘related’ (link that points to related resource). |"
						},
						{
							"name": "Flight Status",
							"item": [
								{
									"name": "Flight Status",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "Retrieve the status of a specific flight on a given date. The available date range is **from 7 days in the past until 5 days in the future.**\n\n### Request URI\n\n#### Code snippet: Call\n\n```\nGET /operations/flightstatus/{flightNumber}/{date}\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{flightNumber}_ | Flight identification. | 2 letter IATA airline code + flight number |\n| _{date}_ | Departure date in the local time of the departure airport.  <br>Supported range: yesterday until 5 days in the future. | yyyy-MM-dd |\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| FlightStatusResource | Root element of flight status response. |\n| .Flights |  |\n| ..Flight\\[\\] (or) ..Flight | 1 – n flights matching the request. (in case of single flight in response, \"Flight\" is object, not array) |\n| ...Departure | Information on departure of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of origin, e.g. “FRA”. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of departure in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already departed (ActualTimeLocal) or  <br>is estimated to depart (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already departed (ActualTimeUTC) or  <br>is estimated to depart (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Departure time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the departure terminal. |\n| .....Gate | Gate where flight is departing from, e.g. “T02”. |\n| ...Arrival | Information on arrival of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of destination. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of arrival in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already landed (ActualTimeLocal) or  <br>is estimated to land (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already landed (ActualTimeUTC) or  <br>is estimated to land (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Arrival time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the arrival terminal. |\n| .....Gate | Gate where flight is arriving to, e.g. “T02”. |\n| ...MarketingCarrier | Marketing specific flight details, does not have to be identical with operation specific details. |\n| ....AirlineID | 2 letter IATA airline code, e.g. “LH”. |\n| ....FlightNumber | Numeric marketing flight number, e.g. “400”. |\n| ...OperatingCarrier | Operating specific flight details, does not have to be identical with marketing specific details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Numeric operating flight number, e.g. “500”. |\n| ...Equipment | Type of aircraft operating this flight. |\n| ....AircraftCode | 3 character IATA aircraft code. |\n| ...FlightStatus | Overall status of this flight.  <br>FlightStatus NA will be shown in case no other flight status is available.  <br>FlightStatus LD is only available in case 'ActualTime...' with the arrival airport is set.  <br>FlightStatus DP is only available in case 'ActualTime...' with the departure airport is set.  <br>FlightStatus CD and RT will be shown, in case the flight is cancelled resp. rerouted. |\n| ....Code | Flight status code, possible values:  <br>CD = Flight Cancelled  <br>DP = Flight Departed  <br>LD = Flight Landed  <br>RT = Flight Rerouted  <br>NA = No status |\n| ....Definition | Long description of the flight status. See above. |"
						},
						{
							"name": "Flight Status by Route",
							"item": [
								{
									"name": "Flight Status by Route",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "Retrieve the status of flights between two airports on a given date. The available date range is from yesterday until 5 days in the future. At most the first 80 matching flights will be returned. It supports cargo or passenger or both flight types, by default it provides passenger flights only.\n\n### Request URI\n\n#### Code snippet: Call\n\n```\nGET /operations/flightstatus/route/{origin}/{destination}/{date}?serviceType={serviceType}\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{origin}_ | Departure airport. | 3 letter IATA airport code, e.g. “FRA” |\n| _{destination}_ | Arrival airport. | 3 letter IATA airport code |\n| _{date}_ | Departure date in the local time of the departure airport.  <br>Supported dates: yesterday until 5 days in the future. | yyyy-MM-dd |\n| _{serviceType}_ | optional - ServiceType to retrieve cargo or passenger or both flights. default - passenger. | enum: {all, passenger, cargo} |\n| _limit_ | Query parameter: the number of items to return (page size) | integer (max 100) |\n| offset | Query parameter: the index of the item with which this result set should begin | integer |\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| FlightStatusResource | Root element of flight status response. |\n| .Flights |  |\n| ..Flight\\[\\] (or) ..Flight | 1 – n flights matching the request. (in case of single flight in response, \"Flight\" is object, not array) |\n| ...Departure | Information on departure of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of origin, e.g. “FRA”. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of departure in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already departed (ActualTimeLocal) or  <br>is estimated to depart (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already departed (ActualTimeUTC) or  <br>is estimated to depart (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Departure time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the departure terminal. |\n| .....Gate | Gate where flight is departing from, e.g. “T02”. |\n| ...Arrival | Information on arrival of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of destination. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of arrival in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already landed (ActualTimeLocal) or  <br>is estimated to land (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already landed (ActualTimeUTC) or  <br>is estimated to land (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Arrival time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the arrival terminal. |\n| .....Gate | Gate where flight is arriving to, e.g. “T02”. |\n| ...MarketingCarrier | Marketing specific flight details, does not have to be identical with operation specific details. |\n| ....AirlineID | 2 letter IATA airline code, e.g. “LH”. |\n| ....FlightNumber | Numeric marketing flight number, e.g. “400”. |\n| ...OperatingCarrier | Operating specific flight details, does not have to be identical with marketing specific details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Numeric operating flight number, e.g. “500”. |\n| ...Equipment | Type of aircraft operating this flight. |\n| ....AircraftCode | 3 character IATA aircraft code. |\n| ...FlightStatus | Overall status of this flight.  <br>FlightStatus NA will be shown in case no other flight status is available.  <br>FlightStatus LD is only available in case 'ActualTime...' with the arrival airport is set.  <br>FlightStatus DP is only available in case 'ActualTime...' with the departure airport is set.  <br>FlightStatus CD and RT will be shown, in case the flight is cancelled resp. rerouted. |\n| ....Code | Flight status code, possible values:  <br>CD = Flight Cancelled  <br>DP = Flight Departed  <br>LD = Flight Landed  <br>RT = Flight Rerouted  <br>NA = No status |\n| ....Definition | Long description of the flight status. See above. |"
						},
						{
							"name": "Flight Status at Arrival Airport",
							"item": [
								{
									"name": "Flight Status at Arrival Airport",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "Retrieve the status of all flights arriving at a specific airport within a given time range which is set to 4 hours by default starting from time value quoted within _fromDateTime_ input parameter.  \nThe permitted range for flights returned is from yesterday until 5 days in the future in 4 hours ranges. At most 80 flights will be returned.\n\nVarious metalinks can be used to switch to _previousRange_ 4 hours period or _nextRange_ 4 hours period.\n\nIt supports cargo or passenger or both flight types, by default it provides passenger flights only.\n\n### Request URI\n\n#### Code snippet: Call\n\n```\nGET /operations/flightstatus/arrivals/{airportCode}/{fromDateTime}?serviceType={serviceType}\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{airportCode}_ | Retrieve the status of flights arriving at this airport. | 3 letter IATA airport code, e.g. “FRA” |\n| _{fromDateTime}_ | Retrieve flights arriving after this time. | yyyy-MM-ddTHH:mm |\n| _{serviceType}_ | optional - ServiceType to retrieve cargo or passenger or both flights. default - passenger. | enum: {all, passenger, cargo} |\n| _limit_ | query parameter: The number of items to return (page size) | integer (max 100) |\n| _offset_ | query parameter: The index of the item with which this result set should begin | integer |\n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| FlightStatusResource | Root element of flight status response. |\n| .Flights |  |\n| ..Flight\\[\\] (or) ..Flight | 1 – n flights matching the request. (in case of single flight in response, \"Flight\" is object, not array) |\n| ...Departure | Information on departure of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of origin, e.g. “FRA”. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of departure in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already departed (ActualTimeLocal) or  <br>is estimated to depart (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already departed (ActualTimeUTC) or  <br>is estimated to depart (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Departure time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the departure terminal. |\n| .....Gate | Gate where flight is departing from, e.g. “T02”. |\n| ...Arrival | Information on arrival of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of destination. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of arrival in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already landed (ActualTimeLocal) or  <br>is estimated to land (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already landed (ActualTimeUTC) or  <br>is estimated to land (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Arrival time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the arrival terminal. |\n| .....Gate | Gate where flight is arriving to, e.g. “T02”. |\n| ...MarketingCarrier | Marketing specific flight details, does not have to be identical with operation specific details. |\n| ....AirlineID | 2 letter IATA airline code, e.g. “LH”. |\n| ....FlightNumber | Numeric marketing flight number, e.g. “400”. |\n| ...OperatingCarrier | Operating specific flight details, does not have to be identical with marketing specific details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Numeric operating flight number, e.g. “500”. |\n| ...Equipment | Type of aircraft operating this flight. |\n| ....AircraftCode | 3 character IATA aircraft code. |\n| ...FlightStatus | Overall status of this flight.  <br>FlightStatus NA will be shown in case no other flight status is available.  <br>FlightStatus LD is only available in case 'ActualTime...' with the arrival airport is set.  <br>FlightStatus DP is only available in case 'ActualTime...' with the departure airport is set.  <br>FlightStatus CD and RT will be shown, in case the flight is cancelled resp. rerouted. |\n| ....Code | Flight status code, possible values:  <br>CD = Flight Cancelled  <br>DP = Flight Departed  <br>LD = Flight Landed  <br>RT = Flight Rerouted  <br>NA = No status |\n| ....Definition | Long description of the flight status. See above. |"
						},
						{
							"name": "Flight Status at Departure Airport",
							"item": [
								{
									"name": "Flight Status at Departure Airport",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "Retrieve the status of all flights departing from a specific airport within a given time range. The permitted range is from yesterday until 5 days in the future. At most 80 flights will be returned. It supports cargo or passenger or both flight types, by default it provides passenger flights only.\n\n### Request URI\n\n#### Code snippet: Call\n\n```\nGET /operations/flightstatus/departures/{airportCode}/{fromDateTime}?serviceType={serviceType}\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{airportCode}_ | Retrieve the status of flights departing this airport. | 3 letter IATA airport code, e.g. “FRA” |\n| _{fromDateTime}_ | Retrieve flights departing after this time. | yyyy-MM-ddTHH:mm |\n| _{serviceType}_ | optional - ServiceType to retrieve cargo or passenger or both flights. default - passenger. | enum: {all, passenger, cargo} |\n| _limit_ | Query parameter: the number of items to return (page size) | integer (max 100) |\n| offset | Query parameter: the index of the item with which this result set should begin | integer |\n\n  \n\n### Response Structure Definition\n\n| Key | Description |\n| --- | --- |\n| FlightStatusResource | Root element of flight status response. |\n| .Flights |  |\n| ..Flight\\[\\] (or) ..Flight | 1 – n flights matching the request. (in case of single flight in response, \"Flight\" is object, not array) |\n| ...Departure | Information on departure of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of origin, e.g. “FRA”. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of departure in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already departed (ActualTimeLocal) or  <br>is estimated to depart (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already departed (ActualTimeUTC) or  <br>is estimated to depart (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of departure in local time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Departure time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the departure terminal. |\n| .....Gate | Gate where flight is departing from, e.g. “T02”. |\n| ...Arrival | Information on arrival of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of destination. |\n| ....ScheduledTimeLocal |  |\n| .....DateTime | Scheduled time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....ScheduledTimeUTC |  |\n| .....DateTime | Scheduled time of arrival in UTC time.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....EstimatedTimeLocal or  <br>....ActualTimeLocal | Depending on whether the specified flight has already landed (ActualTimeLocal) or  <br>is estimated to land (EstimatedTimeLocal), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....EstimatedTimeUTC or  <br>....ActualTimeUTC | Depending on whether the specified flight has already landed (ActualTimeUTC) or  <br>is estimated to land (EstimatedTimeUTC), the corresponding element will be returned. |\n| .....DateTime | Estimated time of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-ddTHH:mmZ. |\n| ....TimeStatus | Arrival time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>NO = No status |\n| .....Definition | Long description of the time status. See above. |\n| ....Terminal |  |\n| .....Name | Name of the arrival terminal. |\n| .....Gate | Gate where flight is arriving to, e.g. “T02”. |\n| ...MarketingCarrier | Marketing specific flight details, does not have to be identical with operation specific details. |\n| ....AirlineID | 2 letter IATA airline code, e.g. “LH”. |\n| ....FlightNumber | Numeric marketing flight number, e.g. “400”. |\n| ...OperatingCarrier | Operating specific flight details, does not have to be identical with marketing specific details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Numeric operating flight number, e.g. “500”. |\n| ...Equipment | Type of aircraft operating this flight. |\n| ....AircraftCode | 3 character IATA aircraft code. |\n| ...FlightStatus | Overall status of this flight.  <br>FlightStatus NA will be shown in case no other flight status is available.  <br>FlightStatus LD is only available in case 'ActualTime...' with the arrival airport is set.  <br>FlightStatus DP is only available in case 'ActualTime...' with the departure airport is set.  <br>FlightStatus CD and RT will be shown, in case the flight is cancelled resp. rerouted. |\n| ....Code | Flight status code, possible values:  <br>CD = Flight Cancelled  <br>DP = Flight Departed  <br>LD = Flight Landed  <br>RT = Flight Rerouted  <br>NA = No status |\n| ....Definition | Long description of the flight status. See above. |"
						},
						{
							"name": "Customer Flight Information",
							"item": [
								{
									"name": "Customer Flight Information",
									"request": {
										"method": "GET",
										"header": []
									},
									"response": []
								}
							],
							"description": "Retrieve the status of a specific flight on a given date.\n\n### Request URI\n\n#### Code snippet: Call\n\n```\nGET /operations/customerflightinformation/{flightNumber}/{date}\n\n ```\n\n| Variable | Description | Format |\n| --- | --- | --- |\n| _{flightNumber}_ | Flight identification. | 2 letter IATA airline code + flight number |\n| _{date}_ | Departure date in the local time of the departure airport.   <br>Supported range: yesterday until 5 days in the future. | yyyy-MM-dd |\n\n### Response Structure Definition\n\n  \n\n| Key | Description |\n| --- | --- |\n| FlightInformation | Root element of flight information response. |\n| .Flights |  |\n| ..Flight\\[\\] (or) ..Flight | 1 – n flights matching the request. (in case of single flight in response, \"Flight\" is object, not array) |\n| ...Departure | Information on departure of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of origin, e.g. “FRA”. |\n| ....Scheduled |  |\n| .....Date | Scheduled Date of departure in local time of the departure airport.  <br>Format: yyyy-MM-dd |\n| .....Time | Scheduled Time of departure in local time of the departure airport.  <br>Format: HH:mm |\n| .....DateTime | Scheduled Date Time of departure in UTC time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....Estimated |  |\n| .....Date | Estimated Date of departure in local time of the departure airport.  <br>Format: yyyy-MM-dd |\n| .....Time | Estimated Time of departure in local time of the departure airport.  <br>Format: HH:mm |\n| .....DateTime | Estimated time of departure in UTC time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....Actual |  |\n| .....Date | Actual Date of departure in local time of the departure airport.  <br>Format: yyyy-MM-dd |\n| .....Time | Actual Time of departure in local time of the departure airport.  <br>Format: HH:mm |\n| .....DateTime | Actual time of departure in UTC time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....Terminal |  |\n| .....Name | Name of the departure terminal. |\n| .....Gate | Gate where flight is departing from, e.g. “T02”. |\n| ....Status | Departure time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>NI = Flight Next Information  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>DP = Flight Departed  <br>NO = No Status |\n| .....Description | Long description of the time status. See above. |\n| ...Arrival | Information on arrival of the flight. |\n| ....AirportCode | 3 letter IATA airport code of the place of destination. |\n| ....Scheduled |  |\n| .....Date | Scheduled Date of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-dd |\n| .....Time | Scheduled Time of arrival in local time of the arrival airport.  <br>Format: HH:mm |\n| .....DateTime | Scheduled Date Time of arrival in UTC time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....Estimated |  |\n| .....Date | Estimated Date of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-dd |\n| .....Time | Estimated Time of arrival in local time of the arrival airport.  <br>Format: HH:mm |\n| .....DateTime | Estimated Date Time of arrival in UTC time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....Actual |  |\n| .....Date | Actual Date of arrival in local time of the arrival airport.  <br>Format: yyyy-MM-dd |\n| .....Time | Actual Time of arrival in local time of the arrival airport.  <br>Format: HH:mm |\n| .....DateTime | Actual Date Time of arrival in UTC time of the departure airport.  <br>Format: yyyy-MM-ddTHH:mm. |\n| ....Terminal |  |\n| .....Name | Name of the arrival terminal. |\n| .....Gate | Gate where flight will arrive, e.g. “T02”. |\n| ....Status | Arrival time-related status of this flight. |\n| .....Code | Time status code, possible values:  <br>FE = Flight Early  <br>OT = Flight On Time  <br>DL = Flight Delayed  <br>LD = Flight Landed  <br>NO = No Status |\n| .....Description | Long description of the time status. See above. |\n| ...MarketingCarrierList | Contains list of Marketing Carriers, could be 1-N |\n| ....MarketingCarrier | Marketing specific flight details, does not have to be identical with operation specific details. |\n| .....AirlineID | 2 letter IATA airline code, e.g. “LH”. |\n| .....FlightNumber | Numeric marketing flight number, e.g. “400”. |\n| ...OperatingCarrier | Operating specific flight details, does not have to be identical with marketing specific details. |\n| ....AirlineID | 2-letter IATA airline code. |\n| ....FlightNumber | Numeric operating flight number, e.g. “500”. |\n| ...Equipment | Type of aircraft operating this flight. |\n| ....AircraftCode | 3 character IATA aircraft code. |\n| ...Status | Overall status of this flight.  <br>FlightStatus NA will be shown in case no other flight status is available.  <br>FlightStatus LD is only available in case 'ActualTime...' with the arrival airport is set.  <br>FlightStatus DP is only available in case 'ActualTime...' with the departure airport is set.  <br>FlightStatus CD and RT will be shown, in case the flight is cancelled resp. rerouted. |\n| ....Code | Flight status code, possible values:  <br>CD = Flight Cancelled  <br>DP = Flight Departed  <br>LD = Flight Landed  <br>RT = Flight Rerouted  <br>DV = Flight Diverted  <br>HD = Flight Heavy Delay  <br>FE = Flight Early  <br>DL = Flight Delayed  <br>OT = Flight On Time  <br>NI = Flight Next Information  <br>NA = No Status |\n| ....Description | Long description of the flight status. See above. |"
						}
					]
				}
			]
		},
		{
			"name": "Open Weather API",
			"item": [
				{
					"name": "Request current weather and forecast data",
					"item": [
						{
							"name": "Get weather infos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/me",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"me"
									]
								},
								"description": "Gets information about the authenticated user."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/me",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"me"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"user\": {\n        \"id\": 12345678,\n        \"username\": \"taylor-lee\",\n        \"email\": \"taylor.lee@example.com\",\n        \"fullName\": \"Taylor Lee\",\n        \"avatar\": \"https://example.com/user/r5u9qpvmujfjf6lbqmga.jpg\",\n        \"isPublic\": true\n    },\n    \"operations\": [\n        {\n            \"name\": \"mock_usage\",\n            \"limit\": 1000000,\n            \"usage\": 110276,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"monitor_request_runs\",\n            \"limit\": 10000000,\n            \"usage\": 1141750,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"api_usage\",\n            \"limit\": 1000000,\n            \"usage\": 16240,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"custom_domains\",\n            \"limit\": 25,\n            \"usage\": 25,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"serverless_requests\",\n            \"limit\": 10000,\n            \"usage\": 0,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"integrations\",\n            \"limit\": 5000,\n            \"usage\": 1018,\n            \"overage\": 0\n        },\n        {\n            \"name\": \"cloud_agent_requests\",\n            \"limit\": 1000000,\n            \"usage\": 1615,\n            \"overage\": 0\n        }\n    ]\n}"
								},
								{
									"name": "Rate Limit Exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/me",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"me"
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
								}
							]
						}
					],
					"description": "Dear Customer!\n\nThank you for subscribing to the One Call API 3.0 subscription! Activating your API keys can take several minutes, and then you will be able to use them to make requests to [One Call API 3.0](https://openweathermap.org/api/one-call-3).\n\nBelow is some important information about how to make the most of your service, please read it carefully before you begin.\n\n**1. How to request data via One Call API 3.0**\n\nFull documentation for this API is available [here](https://openweathermap.org/api/one-call-3). To call this API, you will need to use your API keys that you can find [here](https://home.openweathermap.org/api_keys).\n\nBelow is the format of API calls that you need to use.\n\n**API call to request current weather and forecast data:**  \n[https://api.openweathermap.org/data/3.0/onecall?lat={lat}&amp;lon={lon}&amp;appid={API](https://api.openweathermap.org/data/3.0/onecall?lat=%7Blat%7D&lon=%7Blon%7D&appid=%7BAPI) key}\n\n**API call to request historical data:**  \n[https://api.openweathermap.org/data/3.0/onecall/timemachine?lat={lat}&amp;lon=](https://api.openweathermap.org/data/3.0/onecall/timemachine?lat=%7Blat%7D&lon=)<{lon}&dt={time}&appid={API key}\n\n**API call to request history daily aggregation data:**  \n[https://api.openweathermap.org/data/3.0/onecall/day_summary?lat={lat}&amp;lon={lon}&amp;date={date}&amp;appid={API](https://api.openweathermap.org/data/3.0/onecall/day_summary?lat=%7Blat%7D&lon=%7Blon%7D&date=%7Bdate%7D&appid=%7BAPI) key}\n\n**API call to request weather overview with a human-readable weather summary:<**  \n[https://api.openweathermap.org/data/3.0/onecall/overview?lat={lat}&amp;lon={lon}&amp;appid=](https://api.openweathermap.org/data/3.0/onecall/overview?lat=%7Blat%7D&lon=%7Blon%7D&appid=)\\>{API key}\n\nExample of an API call:  \n[https://api.openweathermap.org/data/3.0/onecall?lat=33.44&amp;lon=-94.04&amp;appid=f389ccd0297700b7288618bbbb5e48eb](https://api.openweathermap.org/data/3.0/onecall?lat=33.44&lon=-94.04&appid=f389ccd0297700b7288618bbbb5e48eb)"
				},
				{
					"name": "Collections",
					"item": [
						{
							"name": "Create a collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"{{collectionName}}\",\n            \"schema\": \"{{collectionSchemaUrl}}\"\n        },\n        \"item\": [\n            {\n                \"request\": {}\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/collections",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
											"disabled": true
										}
									]
								},
								"description": "Creates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include a `collection` object in the request body that contains the following required properties:\n\n*   `info` — An **object** that contains the following properties:\n    *   `name` — A **string** value that contains the collection's name.\n    *   `schema` — A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.\n*   `item` — An **object** that contains the HTTP request and response information.\n    *   `request` — An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.\n\n**Note:**\n\n*   For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):\n    *   `info` object — Use the `definitions.info` entry.\n    *   `item` object — Use the `definitions.items` entry.\n*   For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"name\": \"Test Collection\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
								},
								{
									"name": "Bad Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
													"disabled": true
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceFoundError\",\n        \"message\": \"The specified item already exists.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
								},
								{
									"name": "Malformed Request",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json",
												"name": "Content-Type",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
													"disabled": true
												}
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json; charset=utf-8"
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Found 1 errors with the supplied collection.\",\n        \"details\": [\n            \": must have required property 'info'\"\n        ]\n    }\n}"
								},
								{
									"name": "Rate Limit Exceeded",
									"originalRequest": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"description": "Optional. A workspace ID in which to create the collection.\n\nIf you do not include this query parameter, the system creates the collection in your \"My Workspace\" workspace.",
													"disabled": true
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": ""
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
								}
							]
						},
						{
							"name": "Get a collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections/{{collectionId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"{{collectionId}}"
									],
									"query": [
										{
											"key": "access_key",
											"value": "{{accessKey}}",
											"description": "Optional. A collection's read-only access key. Using this query parameter does not require an API key to call the endpoint.",
											"disabled": true
										}
									]
								},
								"description": "Gets information about a collection. For a complete list of this endpoint's possible values, use the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json)."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
								},
								{
									"name": "Get Collection with Access Token",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2?access_key={{accessKey}}",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											],
											"query": [
												{
													"key": "access_key",
													"value": "{{accessKey}}"
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This is a test collection that makes a tiny request to Postman Echo service to get the list of request headers sent by a HTTP client.\",\n            \"_postman_id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.0.0/collection.json\",\n            \"updatedAt\": \"2022-06-16T20:21:13.000Z\",\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        \"item\": [\n            {\n                \"name\": \"Test GET Response\",\n                \"id\": \"82ee981b-e19f-962a-401e-ea34ebfb4848\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                            ],\n                            \"type\": \"text/javascript\"\n                        }\n                    }\n                ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"GET\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                },\n                \"response\": []\n            }\n        ]\n    }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"We could not find the collection you are looking for\"\n    }\n}"
								},
								{
									"name": "Rate Limit Exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [],
									"cookie": [],
									"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
								}
							]
						},
						{
							"name": "Delete a collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections/{{collectionId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"{{collectionId}}"
									]
								},
								"description": "Deletes a collection."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified item does not exist.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
								},
								{
									"name": "Rate Limit Exceeded",
									"originalRequest": {
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
								}
							]
						},
						{
							"name": "Update a collection",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"{{collectionName}}\",\n            \"schema\": \"{{collectionSchemaUrl}}\"\n        },\n        \"item\": [\n            {\n                \"request\": {}\n            }\n        ]\n    }\n}"
								},
								"url": {
									"raw": "https://api.getpostman.com/collections/{{collectionId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections",
										"{{collectionId}}"
									]
								},
								"description": "Updates a collection using the [Postman Collection v2 schema format](https://schema.postman.com/json/collection/v2.1.0/docs/index.html). Include a `collection` object in the request body that contains the following required properties:\n\n- `info` — An **object** that contains the following properties:\n    - `name` — A **string** value that contains the collection's name.\n    - `schema` — A **string** that contains a URL to the collection's schema. For example, the `https://schema.getpostman.com/collection/v1` URL.\n- `item` — An **object** that contains the HTTP request and response information.\n    - `request` — An **object** that contains the collection's request information. For a complete list of values, refer to the `definitions.request` entry in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json). If you pass an empty object for this value, the system defaults to an untitled GET request.\n\n**Note:**\n\n- For a complete list of available property values for this endpoint, use the following references available in the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json):\n    - `info` object — Use the `definitions.info` entry.\n    - `item` object — Use the `definitions.items` entry.\n- For all other possible values, refer to the [collection.json schema file](https://schema.postman.com/json/collection/v2.1.0/collection.json).\n    \n\n### Important\n\nUse caution when using this endpoint. The system will replace the existing collection with the values passed in the request body."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"collection\": {\n        \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n        \"name\": \"Test Collection\",\n        \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n    }\n}"
								},
								{
									"name": "Forbidden",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Forbidden",
									"code": 403,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"forbiddenError\",\n        \"message\": \"You do not have enough permissions to perform this action.\"\n    }\n}"
								},
								{
									"name": "Not Found",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Not Found",
									"code": 404,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"The specified item does not exist.\",\n        \"details\": {\n            \"item\": \"collection\",\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n        }\n    }\n}"
								},
								{
									"name": "Malformed Request",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\"\n        }\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"malformedRequestError\",\n        \"message\": \"Found 2 errors with the supplied collection.\",\n        \"details\": [\n            \": must have required property 'item'\",\n            \"info: must have required property 'schema'\"\n        ]\n    }\n}"
								},
								{
									"name": "Collection ID Mismatch",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Bad Request",
									"code": 400,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"name": "Content-Type",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": {\n        \"name\": \"collectionMismatchError\",\n        \"message\": \"The collection ID in the path does not match the collection ID in the request body.\"\n    }\n}"
								},
								{
									"name": "Rate Limit Exceeded",
									"originalRequest": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"collection\": {\n        \"info\": {\n            \"name\": \"Test Collection\",\n            \"description\": \"This collection makes a request to the Postman Echo service to get a list of request headers sent by an HTTP client.\",\n            \"schema\": \"https://schema.getpostman.com/json/collection/v2.1.0/collection.json\"\n        },\n        \"item\": [\n            {\n                \"name\": \"Test POST Response\",\n                \"event\": [\n                    {\n                        \"listen\": \"test\",\n                        \"script\": {\n                            \"id\": \"7d2334fc-a84a-4c3d-b26c-7529afa4c0ae\",\n                            \"exec\": [\n                                \"pm.test(\\\"Status code is 200\\\", function () {\",\n                                \"    pm.response.to.have.status(200);\",\n                                \"});\"\n                                ],\n                            \"type\": \"text/javascript\"\n                            }\n                        }\n                    ],\n                \"request\": {\n                    \"url\": \"https://echo.getpostman.com/headers\",\n                    \"method\": \"POST\",\n                    \"header\": [\n                        {\n                            \"key\": \"Content-Type\",\n                            \"value\": \"application/json\"\n                        }\n                    ]\n                }\n            }\n        ]\n    }\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "https://api.getpostman.com/collections/12ece9e1-2abf-4edc-8e34-de66e74114d2",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections",
												"12ece9e1-2abf-4edc-8e34-de66e74114d2"
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
								}
							]
						},
						{
							"name": "Get all collections",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/collections",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"collections"
									],
									"query": [
										{
											"key": "workspace",
											"value": "{{workspaceId}}",
											"description": "Optional. A workspace ID.",
											"disabled": true
										}
									]
								},
								"description": "Gets all of your [collections](https://www.getpostman.com/docs/collections). The response includes all of your subscribed collections."
							},
							"response": [
								{
									"name": "Successful Response",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"description": "Optional. A workspace ID.",
													"disabled": true
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        },\n        {\n            \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"name\": \"Test Collection\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-01-13T10:21:46.000Z\",\n            \"updatedAt\": \"2022-02-12T11:29:56.000Z\",\n            \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n            \"isPublic\": false,\n            \"fork\": {\n                \"label\": \"Test Fork\",\n                \"createdAt\": \"2022-06-16T19:51:44.069Z\",\n                \"from\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        },\n        {\n            \"id\": \"f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"name\": \"Postman Echo\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2021-04-11T09:18:26.000Z\",\n            \"updatedAt\": \"2022-05-01T15:29:32.000Z\",\n            \"uid\": \"12345678-f695cab7-6878-eb55-7943-ad88e1ccfd65\",\n            \"isPublic\": true\n        }\n    ]\n}"
								},
								{
									"name": "Filter by Workspace",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections?workspace=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"description": "Optional. A workspace ID."
												}
											]
										}
									},
									"status": "OK",
									"code": 200,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"collections\": [\n        {\n            \"id\": \"dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"name\": \"Cloud API\",\n            \"owner\": \"12345678\",\n            \"createdAt\": \"2022-04-12T10:29:46.000Z\",\n            \"updatedAt\": \"2022-04-12T10:29:56.000Z\",\n            \"uid\": \"12345678-dac5eac9-148d-a32e-b76b-3edee9da28f7\",\n            \"isPublic\": true\n        }\n    ]\n}"
								},
								{
									"name": "Rate Limit Exceeded",
									"originalRequest": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "https://api.getpostman.com/collections",
											"protocol": "https",
											"host": [
												"api",
												"getpostman",
												"com"
											],
											"path": [
												"collections"
											],
											"query": [
												{
													"key": "workspace",
													"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
													"description": "Optional. A workspace ID.",
													"disabled": true
												}
											]
										}
									},
									"status": "Too Many Requests",
									"code": 429,
									"_postman_previewlanguage": "json",
									"header": [
										{
											"key": "Content-Type",
											"value": "application/json",
											"description": {
												"content": "",
												"type": "text/plain"
											}
										}
									],
									"cookie": [],
									"body": "{\n    \"error\": \"rateLimited\",\n    \"message\": \"Rate limit exceeded. Please retry after 1669048687\"\n}"
								}
							]
						}
					],
					"description": "The `/collections` endpoints let you manage your [collections](https://learning.postman.com/docs/sending-requests/intro-to-collections/)."
				}
			]
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{access_token}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "https://farming-simulator.pstmn.io"
		}
	]
}